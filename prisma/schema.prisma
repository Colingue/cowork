datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  favorites     Favorite[]

  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Space {
  id          String   @id @default(cuid())
  name        String
  description String?
  image      String?
  type       String
  priceMin   Int
  priceMax   Int
  city       String
  address    String
  bookings   Booking[]
  contactEmail String
  contactPhone String
  favorites  Favorite[]

  @@map("spaces")
}

model Booking {
  id          String   @id @default(cuid())
  spaceId     String   @map("space_id")
  userId      String   @map("user_id")
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  status      String
  peopleNumber Int
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("bookings")
}

model Favorite {
  id          String   @id @default(cuid())
  spaceId     String   @map("space_id")
  userId      String   @map("user_id")
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([spaceId, userId])
  @@map("favorites")
}